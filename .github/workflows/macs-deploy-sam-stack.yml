name: MACS reusable build and deploy SAM stack

on:
  workflow_call:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-west-2'
        type: string
      environment_name:
        description: 'Environment Name'
        required: true
        default: 'snd'
        type: string
      node-build-version:
        description: 'The version of node used in the build'
        required: false
        default: '14'
        type: string
      archive_coverage:
        description: 'Archives the code coverage results'
        required: false
        default: false
        type: boolean
    secrets:
      JFROG_AUTH_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      MS_TEAMS_WEBHOOK_URI:
        required: false
      SONAR_TOKEN:
        required: false
      DEPLOY_USER_GITHUB_TOKEN:
        required: false
jobs:
  deploy:
    name: Deploy stack to AWS
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Use Node.js ${{ inputs.node-build-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-build-version }}
      
    - name: 'Create .npmrc'
      shell: bash
      run: |
        echo "Creating/Updating .npmrc in $PWD"
        # Create a new .npmrc if there isn't one there already
        [ ! -e .npmrc ] && echo "registry=https://moetech.jfrog.io/artifactory/api/npm/macs-npm/" > ~/.npmrc
        [ -e .npmrc ] && cp .npmrc ~/.npmrc && echo "" >> ~/.npmrc
        echo "_authToken = ${{ secrets.JFROG_AUTH_TOKEN }}" >> ~/.npmrc
        echo "always-auth = true" >> ~/.npmrc
        echo "legacy-peer-deps=true" >> ~/.npmrc
    
    - name: Microsoft Teams Deploy Card
      uses: patrickpaulin/ms-teams-deploy-card@master
      if: always()
      with:
        github-token: ${{ github.token }}
        webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
        card-layout-exit: complete
        show-on-start: false
        custom-facts: |
          - name: Environment
            value: ${{ inputs.environment_name }}

    - name: Configure AWS credentials
      id: creds
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.region}} 
    
    - run: npm ci

    - name: 'Run test with coverage'
      if: ${{ inputs.environment_name == 'dev' }}
      run: npm run test:coverage

    - name: Archive code coverage results
      uses: actions/upload-artifact@v3
      if:  ${{ always() && inputs.archive_coverage == true }}
      with:
        name: code-coverage-report
        path: coverage/
        retention-days: 5

    - name: SonarCloud Scan
      continue-on-error: true
      uses: SonarSource/sonarcloud-github-action@master
      if: ${{ inputs.environment_name == 'dev' }}
      env:
        GITHUB_TOKEN: ${{ secrets.DEPLOY_USER_GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: SAM Deploy
      # for each env template we would change this from default to match the variables in the sameconfig.toml section.
      run: npm run deploy -- --config-env ${{ inputs.environment_name }}
